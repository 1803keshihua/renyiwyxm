{"version":3,"sources":["access-compile.js"],"names":[],"mappings":"AAAA;;AAEA,OAAO,CAAC,SAAD,EAAY,gBAAZ,EAA8B,mBAA9B,CAAP,EAA2D,UAAU,MAAV,EAAkB,MAAlB,EAA0B,UAA1B,EAAsC;;AAEhG;;AAEA;AACA;;AAEA,KAAI,SAAS,SAAS,MAAT,CAAgB,KAAhB,EAAuB,EAAvB,EAA2B,GAA3B,EAAgC,KAAhC,EAAuC,SAAvC,EAAkD,QAAlD,EAA4D,GAA5D,EAAiE;AAC7E,MAAI,IAAI,CAAR;AAAA,MACI,MAAM,MAAM,MADhB;AAAA,MAEI,OAAO,OAAO,IAFlB;;AAIA;AACA,MAAI,OAAO,GAAP,MAAgB,QAApB,EAA8B;AAC7B,eAAY,IAAZ;AACA,QAAK,CAAL,IAAU,GAAV,EAAe;AACd,WAAO,KAAP,EAAc,EAAd,EAAkB,CAAlB,EAAqB,IAAI,CAAJ,CAArB,EAA6B,IAA7B,EAAmC,QAAnC,EAA6C,GAA7C;AACA;;AAED;AACA,GAPD,MAOO,IAAI,UAAU,SAAd,EAAyB;AAC/B,eAAY,IAAZ;;AAEA,OAAI,CAAC,WAAW,KAAX,CAAL,EAAwB;AACvB,UAAM,IAAN;AACA;;AAED,OAAI,IAAJ,EAAU;;AAET;AACA,QAAI,GAAJ,EAAS;AACR,QAAG,IAAH,CAAQ,KAAR,EAAe,KAAf;AACA,UAAK,IAAL;;AAEA;AACA,KALD,MAKO;AACN,YAAO,EAAP;AACA,UAAK,SAAS,EAAT,CAAY,IAAZ,EAAkB,GAAlB,EAAuB,KAAvB,EAA8B;AAClC,aAAO,KAAK,IAAL,CAAU,OAAO,IAAP,CAAV,EAAwB,KAAxB,CAAP;AACA,MAFD;AAGA;AACD;;AAED,OAAI,EAAJ,EAAQ;AACP,WAAO,IAAI,GAAX,EAAgB,GAAhB,EAAqB;AACpB,QAAG,MAAM,CAAN,CAAH,EAAa,GAAb,EAAkB,MAAM,KAAN,GAAc,MAAM,IAAN,CAAW,MAAM,CAAN,CAAX,EAAqB,CAArB,EAAwB,GAAG,MAAM,CAAN,CAAH,EAAa,GAAb,CAAxB,CAAhC;AACA;AACD;AACD;;AAED,MAAI,SAAJ,EAAe;AACd,UAAO,KAAP;AACA;;AAED;AACA,MAAI,IAAJ,EAAU;AACT,UAAO,GAAG,IAAH,CAAQ,KAAR,CAAP;AACA;;AAED,SAAO,MAAM,GAAG,MAAM,CAAN,CAAH,EAAa,GAAb,CAAN,GAA0B,QAAjC;AACA,EArDD;;AAuDA,QAAO,MAAP;AACA,CA/DD;;AAiEA","file":"access-compile-compile.js","sourcesContent":["\"use strict\";\n\ndefine([\"../core\", \"../core/toType\", \"../var/isFunction\"], function (jQuery, toType, isFunction) {\n\n\t\"use strict\";\n\n\t// Multifunctional method to get and set values of a collection\n\t// The value/s can optionally be executed if it's a function\n\n\tvar access = function access(elems, fn, key, value, chainable, emptyGet, raw) {\n\t\tvar i = 0,\n\t\t    len = elems.length,\n\t\t    bulk = key == null;\n\n\t\t// Sets many values\n\t\tif (toType(key) === \"object\") {\n\t\t\tchainable = true;\n\t\t\tfor (i in key) {\n\t\t\t\taccess(elems, fn, i, key[i], true, emptyGet, raw);\n\t\t\t}\n\n\t\t\t// Sets one value\n\t\t} else if (value !== undefined) {\n\t\t\tchainable = true;\n\n\t\t\tif (!isFunction(value)) {\n\t\t\t\traw = true;\n\t\t\t}\n\n\t\t\tif (bulk) {\n\n\t\t\t\t// Bulk operations run against the entire set\n\t\t\t\tif (raw) {\n\t\t\t\t\tfn.call(elems, value);\n\t\t\t\t\tfn = null;\n\n\t\t\t\t\t// ...except when executing function values\n\t\t\t\t} else {\n\t\t\t\t\tbulk = fn;\n\t\t\t\t\tfn = function fn(elem, key, value) {\n\t\t\t\t\t\treturn bulk.call(jQuery(elem), value);\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (fn) {\n\t\t\t\tfor (; i < len; i++) {\n\t\t\t\t\tfn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (chainable) {\n\t\t\treturn elems;\n\t\t}\n\n\t\t// Gets\n\t\tif (bulk) {\n\t\t\treturn fn.call(elems);\n\t\t}\n\n\t\treturn len ? fn(elems[0], key) : emptyGet;\n\t};\n\n\treturn access;\n});\n\n//# sourceMappingURL=access-compile.js.map"]}